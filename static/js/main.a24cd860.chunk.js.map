{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","d","Date","useState","query","setQuery","weather","setWeather","getDay","day","setDay","getDate","date","setDate","getMonth","month","setMonth","getFullYear","year","setYear","toLocaleTimeString","time","setTime","setInterval","className","main","temp","type","placeholder","value","onChange","e","target","onKeyPress","key","fetch","then","res","json","result","console","log","name","sys","country","cod","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAEMA,EACE,mCADFA,EAEG,0CA2EMC,MAzEf,WAAgB,IAAD,EACTC,EAAI,IAAIC,KADC,EAIYC,mBAAS,IAJrB,mBAINC,EAJM,KAIAC,EAJA,OAKgBF,mBAAS,IALzB,mBAKNG,EALM,KAKEC,EALF,OAMQJ,mBAHZ,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAGbF,EAAEO,WANtB,mBAMNC,EANM,KAMFC,EANE,OAOUP,mBAASF,EAAEU,WAPrB,mBAONC,EAPM,KAODC,EAPC,OAQYV,mBANd,CAAC,UAAU,WAAW,QAAQ,QAAQ,MAAM,OAAO,OAAO,SAAS,YAAY,UAAU,WAAW,YAMxEF,EAAEa,aAR5B,mBAQNC,EARM,KAQAC,EARA,OASUb,mBAASF,EAAEgB,eATrB,mBASNC,EATM,KASDC,EATC,OAUUhB,mBAASF,EAAEmB,sBAVrB,mBAUNC,EAVM,KAUDC,EAVC,KAmCb,OAFAC,aAVmB,WACjBtB,EAAI,IAAIC,KAGRc,EAFW,CAAC,UAAU,WAAW,QAAQ,QAAQ,MAAM,OAAO,OAAO,SAAS,YAAY,UAAU,WAAW,YAEjGf,EAAEa,aAChBJ,EAFS,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAEpCT,EAAEO,WACZW,EAAQlB,EAAEgB,eACVJ,EAAQZ,EAAEU,WACVW,EAAQrB,EAAEmB,wBAEW,KAGrB,qBAAKI,UAAgC,oBAAdlB,EAAQmB,MAAmBnB,EAAQmB,KAAKC,KAAK,GAAG,OAAc,MAArF,SACE,iCACE,qBAAKF,UAAU,aAAf,SACE,uBACEG,KAAK,OACLH,UAAU,aACVI,YAAY,YACZC,MAAOzB,EACP0B,SAAU,SAAAC,GAAC,OAAE1B,EAAS0B,EAAEC,OAAOH,QAC/BI,WAjCK,SAAAF,GACF,UAARA,EAAEG,KACHC,MAAM,GAAD,OAAIpC,EAAJ,sBAA0BK,EAA1B,+BAAsDL,IAC1DqC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GACJhC,EAAWgC,GACXlC,EAAS,IACTmC,QAAQC,IAAIF,WA6BU,oBAAdjC,EAAQmB,KACd,8BACE,qBAAKD,UAAU,eAAf,SACE,sBAAKA,UAAU,WAAf,UAA2BlB,EAAQoC,KAAnC,KAA2CpC,EAAQqC,IAAIC,eAG3C,KAAbtC,EAAQuC,IACT,qBAAKrB,UAAU,eAAf,SACE,qBAAKA,UAAU,WAAf,oCAEF,GACF,sBAAKA,UAAU,OAAf,UAAuBf,EAAvB,KAA8BG,EAA9B,IAAqCG,EAArC,IAA6CG,EAA7C,KAAqDG,KAC/B,oBAAdf,EAAQmB,KACd,8BACA,sBAAKD,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,oBAAuBlB,EAAQmB,YAA/B,aAAuB,EAAcC,KAArC,WACA,qBAAKF,UAAU,UAAf,SAA0BlB,EAAQA,QAAQ,GAAGmB,YAG9C,SC7DEqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.a24cd860.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react';\nimport './index.css';\nconst api = {\n  key : \"11d7888124f14e1aef642dad695d7d92\",\n  base : \"https://api.openweathermap.org/data/2.5\"\n}\nfunction App() {\n  let d = new Date();\n  let mnth = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\n  let dy = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\n  const [query,setQuery] = useState('');\n  const [weather,setWeather] = useState('');\n  const [day,setDay] = useState(dy[d.getDay()]);\n  const [date,setDate] = useState(d.getDate());\n  const [month,setMonth] = useState(mnth[d.getMonth()]);\n  const [year,setYear] = useState(d.getFullYear());\n  const [time,setTime] = useState(d.toLocaleTimeString());\n\n  const search = e=>{\n    if(e.key===\"Enter\"){\n      fetch(`${api.base}/weather?q=${query}&units=metric&appid=${api.key}`)\n      .then(res=>res.json())\n      .then(result=>{\n        setWeather(result);\n        setQuery('');\n        console.log(result);\n      })\n    }\n  }\n  const updateTime = ()=>{\n    d = new Date();\n    let mnth = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\n    let dy = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\n    setMonth(mnth[d.getMonth()]);\n    setDay(dy[d.getDay()]);\n    setYear(d.getFullYear());\n    setDate(d.getDate());\n    setTime(d.toLocaleTimeString())\n  }\n  setInterval(updateTime,1000)\n    \n  return (\n    <div className={typeof weather.main!=\"undefined\"?(weather.main.temp>16?'warm':'app'):'app'}>\n      <main>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search...\"\n            value={query}\n            onChange={e=>setQuery(e.target.value)}\n            onKeyPress={search}\n          />\n        </div>\n        {typeof weather.main!=\"undefined\"?(\n          <div>\n            <div className=\"location-box\">\n              <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n            </div>\n          </div>\n          ):(weather.cod==404?(\n            <div className=\"location-box\">\n              <div className=\"location\">Can't find the City.</div>\n            </div>\n          ):'')}\n          <div className=\"date\">{day}, {date} {month} {year}, {time}</div>\n          {typeof weather.main!=\"undefined\"?(\n            <div>\n            <div className=\"weather-box\">\n              <div className=\"temp\">{weather.main?.temp}Â°C</div>\n              <div className=\"weather\">{weather.weather[0].main}</div>\n            </div>\n          </div>\n          ):('')}    \n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}